### A Pluto.jl notebook ###
# v0.12.21

using Markdown
using InteractiveUtils

# This Pluto notebook uses @bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of @bind gives bound variables a default value (instead of an error).
macro bind(def, element)
    quote
        local el = $(esc(element))
        global $(esc(def)) = Core.applicable(Base.get, el) ? Base.get(el) : missing
        el
    end
end

# ╔═╡ 90b0c22a-657a-11eb-0d17-9b2f74d9c14b
using Plots, LinearAlgebra

# ╔═╡ 4baa21f4-67c4-11eb-3ec2-878ddfb8b050
@bind beta html"<input type=range min=40 max=150.0 step= 5>"

# ╔═╡ 600110c0-67c4-11eb-04b3-d1232c4aba5a
@bind gamma html"<input type=range min=30 max=150.0 step= 5>"

# ╔═╡ dd402f44-67c4-11eb-10f6-8537fef934a2


# ╔═╡ 6155003e-66f5-11eb-191c-c108456a85f6
# define Bloch sphere
function bloch()
	N=100
	a=0.150
	b=100
	lw=1
	lw1 = 5
	theta=LinRange(0.0,2*pi,N)
	phi=LinRange(0.0,2*pi,N)
	z0=0.0
	r = 1.0
	plot3d(r*sin.(theta).*cos.(0.0),r*sin.(theta).*sin.(0.0),r*cos.(theta),legend=false,line = (:black, lw, abs.(a.-sin.(phi)/b)),size=(1.0*600,1.0*520),axis=([], false),box=:on,camera = (beta, gamma),xlim=(-1.0,1.0), ylim=(-1.0,1.0),zlim=(-1.0,1.0))
	for n in 2:17
		long=n*pi/18
		plot3d!(r*sin.(theta).*cos.(long),r*sin.(theta).*sin.(long),r*cos.(theta),line = (:black, lw, abs.(a.-sin.(phi)/b)))
	end
#	plot3d!(sin.(theta),z0*ones(N),cos.(theta),line = (:black, lw, abs.(a.-z0/b)))
#	plot3d!(z0*ones(N),sin.(theta),cos.(theta),line = (:black, lw, abs.(a.-sin.(theta)/b)))
	plot3d!(r*sin.(theta),r*cos.(theta),zeros(N),line = (:black, lw, abs.(a.-cos.(theta)/b)))
	z1= 2*r/3
	rho1= sqrt(r^2-z1*z1)
	x1=rho1*sin.(theta)
	y1=rho1*cos.(theta)
	plot3d!(x1,y1,z1*ones(N),line = (:black, lw, abs.(a.-cos.(theta)/b)))
	z2= -2*r/3
	rho2= sqrt(r^2-z2*z2)
	x2=rho2*sin.(theta)
	y2=rho2*cos.(theta)
	plot3d!(x2,y2,z2*ones(N),line = (:black, lw, abs.(a.-cos.(theta)/b)))
#   plot3d! unit circle behind
	alpha = 0
	x3 = r*cos.(theta)
	z3 = zeros(N)
	y3 = r*sin.(theta)
	#tune the angle of the circle by rotating with the rotation matrix
	x3 = cos(alpha)*x3 - sin(alpha)*y3
	y3 = sin(alpha)*x3 + cos(alpha)*y3
	
	plot3d!(x3,y3,z3,line = (:blue, lw1, abs.(a.-cos.(theta)/b)))
end

# ╔═╡ cf8dec26-66f5-11eb-0da4-1f6980b588b2
bloch()

# ╔═╡ b319b6be-657a-11eb-0c9a-b7bad8458f33
#define dissipator operator
function D(sigma)
	d = size(sigma)[1]
	I0 = Matrix(1.0I,d,d)
	kron(conj(sigma),sigma)-0.5*kron(I0,transpose(conj(sigma))*sigma)-0.5*kron(transpose(transpose(conj(sigma))*sigma),I0)
end

# ╔═╡ 5b0217b4-6606-11eb-36ff-11ab6f2cfc8e
@bind Delta html"<input type=range min=0.01 max=20.0 step=0.05>"

# ╔═╡ 5c191eb8-6606-11eb-135a-2dfc9770d760
@bind delta html"<input type=range min=0.01 max=20.0 step=0.05>"

# ╔═╡ 60454810-6606-11eb-21bb-2f8c73d64945
@bind Omega1 html"<input type=range min=0.01 max=10.0 step=0.05>"

# ╔═╡ 67bbd7b0-6606-11eb-3acf-37b5b5ef67e3
@bind Omega2 html"<input type=range min=0.01 max=10.0 step=0.05>"

# ╔═╡ 6cb9a9e0-6606-11eb-12c5-131eb60d99db
@bind Gamma1 html"<input type=range min=0.01 max=3.0 step=0.05>"

# ╔═╡ 70a3907a-6606-11eb-0876-7719516e21bc
#@bind Gamma2 html"<input type=range min=0.01 max=3.0 step=0.05>"

# ╔═╡ 746f3452-6606-11eb-0a1a-c52783cd8304
@bind tt html"<input type=range min=0.01 max=20.0 step=0.05>"

# ╔═╡ 16fffc9c-6701-11eb-3c4b-3fbcbf3e6150
sqrt(1+1im)

# ╔═╡ 599ee4b4-6701-11eb-37b2-2b3292da97b0
sqrt(sqrt(2))*exp(+1im*pi/8)

# ╔═╡ 17513e16-6703-11eb-3451-074dadf85677
a = Complex[1 2 3;4 5 6;7 8 9]

# ╔═╡ 63d79182-67b1-11eb-2787-8d3e4ab0fdc8
a[1] = 1.2

# ╔═╡ 67675986-67b1-11eb-15a7-9591b7f2ebbb
a

# ╔═╡ 2a2f0d86-67af-11eb-3a91-97a93320511f
Float64(a)

# ╔═╡ 1fc07350-6703-11eb-01b9-e53976d2f96e
reshape(a',9,1)

# ╔═╡ 4daa333c-6703-11eb-2ce1-15174d435965
b = [1;2;3;4;5;6;7;8;9]

# ╔═╡ 48f15936-6606-11eb-2bd9-1d8d733118c1
begin 
	
	#define sigma_plus and sig_minus
	g1 = [1.0;0.0;0.0]
	g2 = [0.0;1.0;0.0]
	e = [0.0;0.0;1.0]
	sigma1 = g1*e'
	sigma2 = g2*e'
	sigmax = Complex[0 1 0;1 0 0;0 0 0]
	sigmay = Complex[0 -1im 0;1im 0 0;0 0 0]
	sigmaz = Complex[1 0 0;0 -1 0;0 0 0]
	sigma0 = Complex[0 0 0;0 0 0;0 0 1]
	
	Gamma2 = Gamma1 
	

	#deifne g plus and g minus state
	theta = atan(Omega2/Omega1)
	gp = cos(theta)*g1 + sin(theta)*g2
	gm = -sin(theta)*g1 + cos(theta)*g2
	GP = gp*gp'
	GM = gm*gm'
	
	
	#define Hamiltonian 
	H_a = Delta*g1*g1' + (Delta-delta)*g2*g2'
	H_af = 0.5*Omega1*(sigma1 + conj(sigma1')) + 0.5*Omega2*(sigma2 + conj(sigma2'))
	H = H_a + H_af
	
	#define superoperator
	I3 = Matrix(1.0I,3,3)
	H_eff = -1im*(kron(I3,H)-kron(conj(H'),I3)) 
	L_eff = Gamma1*D(sigma1)+Gamma2*D(sigma2)
	S = H_eff+L_eff #superoperator
	evals, evecs = eigen(S)
	
	#define time parameter
	num = 1000
	tmax = tt
	t = LinRange(0,tmax,num)
	dt = t[2]-t[1]
	
	#define initial state
	rho_0 = zeros(9)
	rho_0[1] = 1.0
	
	#quantum state evolution 
	u1 = zeros(num)
	v1 = zeros(num)
	w1 = zeros(num)
	u2 = zeros(num)
	v2 = zeros(num)
	w2 = zeros(num)
	
	rho_ee = zeros(num)
	rho_gg1 = zeros(num)
	rho_gg2 = zeros(num)
	rho_gp = zeros(num)
	rho_gm = zeros(num)
	for i in 1:num
		rho_all = evecs*Diagonal(exp.(evals*t[i]))*inv(evecs)*rho_0
		phi = atan(-1*imag(rho_all[3])/real(rho_all[3]))
		rho_ee[i] = real(rho_all[9])
		rho_gg2[i] = real(rho_all[5])
		rho_gg1[i] = real(rho_all[1])
		DM = reshape(rho_all,3,3)
		rho_gp[i] = real(tr(GP*DM))
		rho_gm[i] = real(tr(GM*DM))
		u1[i] = real(tr(sigmax*DM))
		v1[i] = real(tr(sigmay*DM))
		w1[i] = real(tr(sigmaz*DM))
		u2[i] = real(tr(sigma0*DM)*cos(phi))
		v2[i] = real(tr(sigma0*DM)*sin(phi))
		
		
	end
	
	l = @layout [a;b;c]
	p1 = plot(t,rho_ee,label="Prob in e state (Numerical)")
	p1 = plot!(t,rho_gg2,label="Prob in g2 state (Numerical)")
	p1 = plot!(t,rho_gg1,label="Prob in g1 state (Numerical)")
	p2 = plot(t,rho_ee,label="Prob in e state",legend=:topleft)
	p2 = plot!(t,rho_gp,label="Prob in gp state")
	p2 = plot!(t,rho_gm,label="Prob in gm state")
	p3 = bloch()
	p3 = scatter3d!(u1,v1,w1,ms=3,zcolor=t/tmax,m =(:heat, 0.25),markerstrokewidth=0)
	p3 = scatter3d!(u2,v2,w2,ms=3,zcolor=t/tmax,m =(:algae, 0.25),markerstrokewidth=0)
	p4 = plot(p1,p2,p3,layout=l,size=(500,1200))
end

# ╔═╡ 6b487368-6703-11eb-2b71-db62ca03de06
reshape(b,3,3)

# ╔═╡ c5f8564e-67b1-11eb-1f92-0ffc050a83ca
cosd(3.14)

# ╔═╡ Cell order:
# ╠═90b0c22a-657a-11eb-0d17-9b2f74d9c14b
# ╠═4baa21f4-67c4-11eb-3ec2-878ddfb8b050
# ╠═600110c0-67c4-11eb-04b3-d1232c4aba5a
# ╟─dd402f44-67c4-11eb-10f6-8537fef934a2
# ╠═6155003e-66f5-11eb-191c-c108456a85f6
# ╠═cf8dec26-66f5-11eb-0da4-1f6980b588b2
# ╠═b319b6be-657a-11eb-0c9a-b7bad8458f33
# ╠═5b0217b4-6606-11eb-36ff-11ab6f2cfc8e
# ╠═5c191eb8-6606-11eb-135a-2dfc9770d760
# ╠═60454810-6606-11eb-21bb-2f8c73d64945
# ╠═67bbd7b0-6606-11eb-3acf-37b5b5ef67e3
# ╠═6cb9a9e0-6606-11eb-12c5-131eb60d99db
# ╠═70a3907a-6606-11eb-0876-7719516e21bc
# ╠═746f3452-6606-11eb-0a1a-c52783cd8304
# ╠═48f15936-6606-11eb-2bd9-1d8d733118c1
# ╠═16fffc9c-6701-11eb-3c4b-3fbcbf3e6150
# ╠═599ee4b4-6701-11eb-37b2-2b3292da97b0
# ╠═17513e16-6703-11eb-3451-074dadf85677
# ╠═63d79182-67b1-11eb-2787-8d3e4ab0fdc8
# ╠═67675986-67b1-11eb-15a7-9591b7f2ebbb
# ╠═2a2f0d86-67af-11eb-3a91-97a93320511f
# ╠═1fc07350-6703-11eb-01b9-e53976d2f96e
# ╠═4daa333c-6703-11eb-2ce1-15174d435965
# ╠═6b487368-6703-11eb-2b71-db62ca03de06
# ╠═c5f8564e-67b1-11eb-1f92-0ffc050a83ca
